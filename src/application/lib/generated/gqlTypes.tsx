// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    DateTime: Date;
}

export interface LocationInput {
    lat: Scalars['Float'];
    long: Scalars['Float'];
}

export interface Mutation {
    generateWallet: Wallet;
    newSetList: SetList;
    newSongContract: SongContract;
    voteSetList: SetList;
}


export interface MutationGenerateWalletArgs {
    phoneNumber: Scalars['String'];
}


export interface MutationNewSetListArgs {
    appId: Scalars['Int'];
    cityName: Scalars['String'];
    endDate: Scalars['DateTime'];
    image: Scalars['String'];
    lat: Scalars['Float'];
    long: Scalars['Float'];
    rewardAmount: Scalars['Int'];
    startDate: Scalars['DateTime'];
    title: Scalars['String'];
}


export interface MutationNewSongContractArgs {
    appId: Scalars['Int'];
    setListId: Scalars['Int'];
    songId: Scalars['Int'];
}


export interface MutationVoteSetListArgs {
    setListId: Scalars['Int'];
    votes: Array<SetListVotesInput>;
}

export interface NftAsset {
    metadata: Scalars['String'];
    clawback: Scalars['String'];
    creator: Scalars['String'];
    deleted: Scalars['Boolean'];
    freeze: Scalars['String'];
    index: Scalars['Int'];
    manager: Scalars['String'];
    name: Scalars['String'];
    reserve: Scalars['String'];
    total: Scalars['Int'];
    unitName: Scalars['String'];
    url: Scalars['String'];
}

export interface Query {
    nfts: Array<NftAsset>;
    setlists: Array<SetList>;
    songs: Array<SongContract>;
    transactions: Array<Transaction>;
    users: Array<User>;
    wallet: Wallet;
}


export interface QuerySetlistsArgs {
    filtration?: InputMaybe<SetListInput>;
    location: LocationInput;
}


export interface QuerySongsArgs {
    filtration?: InputMaybe<SongInput>;
}


export interface QueryUsersArgs {
    filtration?: InputMaybe<UserInput>;
}

export interface SetList {
    cityName: Scalars['String'];
    distance: Scalars['Int'];
    endDate: Scalars['DateTime'];
    id: Scalars['Int'];
    appId: Scalars['Int'];
    image: Scalars['String'];
    lat: Scalars['Float'];
    long: Scalars['Float'];
    rewardAmount: Scalars['Int'];
    songs: Array<SongContract>;
    startDate: Scalars['DateTime'];
    title: Scalars['String'];
    assetId?: Scalars['Int'];
}

export interface SetListInput {
    cityName?: InputMaybe<Scalars['String']>;
    endDate?: InputMaybe<Scalars['DateTime']>;
    expired?: InputMaybe<Scalars['Boolean']>;
    id?: InputMaybe<Scalars['Int']>;
    startDate?: InputMaybe<Scalars['DateTime']>;
    title?: InputMaybe<Scalars['String']>;
}

export interface SetListVotesInput {
    id: Scalars['Int'];
    vote: Scalars['Boolean'];
}

export interface SongContract {
    createdAt: Scalars['DateTime'];
    id: Scalars['Int'];
    image?: Maybe<Scalars['String']>;
    fetched?: Scalars['Boolean'];
    setListId: Scalars['Int'];
    artist?: Maybe<Scalars['String']>;
    songId: Scalars['Int'];
    title?: Maybe<Scalars['String']>;
    updatedAt: Scalars['DateTime'];
}

export interface SongInput {
    id?: InputMaybe<Scalars['Int']>;
    image?: InputMaybe<Scalars['String']>;
    setListId?: InputMaybe<Scalars['Int']>;
    artist?: InputMaybe<Scalars['String']>;
    songId?: InputMaybe<Scalars['Int']>;
    title?: InputMaybe<Scalars['String']>;
}

export interface Transaction {
    amount: Scalars['Int'];
    fee: Scalars['Int'];
    id: Scalars['String'];
    note: Scalars['String'];
    receiver: Scalars['String'];
    roundTime: Scalars['Int'];
    sender: Scalars['String'];
}

export interface User {
    _id: Scalars['String'];
    email: Scalars['String'];
    firstname: Scalars['String'];
    lastname: Scalars['String'];
    role: Scalars['String'];
}

export interface UserInput {
    email?: InputMaybe<Scalars['String']>;
    firstname?: InputMaybe<Scalars['String']>;
    lastname?: InputMaybe<Scalars['String']>;
}

export interface Wallet {
    amount: Scalars['Int'];
    phoneNumber: Scalars['String'];
    walletAddress: Scalars['String'];
}
